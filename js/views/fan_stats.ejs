<html>
<head>
    <meta charset="UTF-8">
    <title>Fan Speed Statistics</title>
    <!--Load the AJAX API-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>
<style>
    #filter-input {
        margin: 20px;
        position: absolute;
        top: -5%;
        left: 93%;
        text-align: center;
        transform: translate(-50%, -50%);
    }
</style>

<body>
<div style="width: 70%; position: absolute; top: 45%; left: 50%; transform: translate(-50%, -50%);">
    <div id="filter-input">
        <form onchange="filterData();return false;">
            <label for="filterTime">Filter data: </label>
            <select id="filterTime" >
                <option value=0></option>
                <option value=0.5>30 seconds</option>
                <option value=1>Last minute</option>
                <option value=60>Last hour</option>
                <option value=1440>Last day</option>
            </select>
            <span id="error"></span>
        </form>
    </div>
    <canvas id="fanChart" onload="read_data()"></canvas>
</div>



<script>
    //Fan data graph
    const ctx = document.getElementById('fanChart').getContext("2d");

    const fan_graph = new Chart(ctx, {
        type: "line",
        data: {
            labels: [],
            datasets: [{
                data: [],
                borderColor: "green",
                fill: false,
                label: "Fan Speed Percentage"
            }]
        },
        options: {
            scales: {
                y: {
                    suggestedMin: 0,
                    suggestedMax: 100
                },
                x:{
                    ticks: {
                        //changing the time format from milliseconds to DD/MM/YY HH:MM:SS format
                        callback: function (val, index) {
                            console.log(this.getLabelForValue(val));
                            const time = new Date(this.getLabelForValue(val));
                            const d = (time.getDate() < 10) ? "0" + time.getDate() : time.getDate();
                            const mo = (time.getMonth() < 10) ? "0" + time.getMonth() : time.getMonth();
                            const y = (time.getFullYear() < 10) ? "0" + time.getFullYear() : time.getFullYear();
                            const h = (time.getHours() < 10) ? "0" + time.getHours() : time.getHours();
                            const m = (time.getMinutes() < 10) ? "0" + time.getMinutes() : time.getMinutes();
                            const s = (time.getSeconds() < 10) ? "0" + time.getSeconds() : time.getSeconds();
                            return d + "/" + mo + "/" + y + "\n" + h + ":" + m + ":" + s;

                        }
                    }
                }
            },
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: "Fan value",


                }
            }
        }
    });
    /**
     * Filtering data from a time interval
     * @function
     * @return Array of filtered datas and datapoints
     */
    function filterData(){
        const filterDate = [...fan_graph.data.labels];
        const filter_time = document.getElementById("filterTime").value;
        const error = document.getElementById("error");
        if(filter_time > 0) {
            let filter_index = filterDate.length;
            for (let i = 0; i < filterDate.length; ++i) {

                if ((Date.now() - filterDate[i]) <= (filter_time * 1000 * 60)) {
                    filter_index--;
                }
            }
            console.log(filter_index);
            if(filter_index == 0 ){
                error.textContent = "Every data is filtered."
                error.style.color = "red"
            } else {
                error.textContent = ""
            }

            const slicedDate = filterDate.slice(filter_index, filterDate.length);
            const filterDataPoints = [...fan_graph.data.datasets[0].data];
            const slicedDataPoints = filterDataPoints.slice(filter_index, filterDate.length)
            console.log(slicedDataPoints);
            fan_graph.config.data.labels = slicedDate;
            fan_graph.config.data.datasets[0].data = slicedDataPoints;
            fan_graph.update();
        }


    }

    //Receiving data and updating the chart from server side
    const read_data = () => {
        fetch('/mutable-data').then(tmp => tmp.json()).then(data => {


            fan_graph.data.labels.push(data.timestamp);
            fan_graph.data.datasets[0].data.push(data.speed);

            // re-render the chart
            fan_graph.update();


        });
    }
    //Receiving the data every 5 seconds
    setInterval(read_data, 5000);

</script>
</body>
</html>
