<html>
<head>
    <meta charset="UTF-8">
    <title>Fan Speed Statistics</title>
    <!--Load the AJAX API-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>
<style>
    #time_container{
        margin: 0px;
        border-radius: 5px;
        height: 20%;
        width: 30%;
        position: absolute;
        top: 95%;
        left: 50%;
        text-align: center;
        transform: translate(-50%, -50%);
    }
    #filterTime {
        margin: 20px;
        width: 15%;
    }
    #filterTime:invalid {
        border: solid red 3px;
    }
</style>

<body>
<div style="width: 70%; position: absolute; top: 45%; left: 50%; transform: translate(-50%, -50%);"><canvas id="fanChart" onload="read_data()"></canvas></div>

<div id="time_container">
    <form onsubmit="filterData();return false;">
        <input name="filterTime"  type = "number" id = "filterTime" value = "0"  min = "0" max = "1200">Filter data from X minutes</input>
        <input type="submit" value="Submit">
    </form>
</div>

<script>
    const ctx = document.getElementById('fanChart').getContext("2d");

    const fan_graph = new Chart(ctx, {
        type: "line",
        data: {
            labels: [],
            datasets: [{
                data: [],
                borderColor: "green",
                fill: false,
                label: "Fan Speed Percentage"
            }]
        },
        options: {
            scales: {
                y: {
                    suggestedMin: 0,
                    suggestedMax: 100
                },
                x:{
                    ticks: {
                        callback: function (val, index) {
                            console.log(this.getLabelForValue(val));
                            const time = new Date(this.getLabelForValue(val));
                            const d = (time.getDate() < 10) ? "0" + time.getDate() : time.getDate();
                            const mo = (time.getMonth() < 10) ? "0" + time.getMonth() : time.getMonth();
                            const y = (time.getFullYear() < 10) ? "0" + time.getFullYear() : time.getFullYear();
                            const h = (time.getHours() < 10) ? "0" + time.getHours() : time.getHours();
                            const m = (time.getMinutes() < 10) ? "0" + time.getMinutes() : time.getMinutes();
                            const s = (time.getSeconds() < 10) ? "0" + time.getSeconds() : time.getSeconds();
                            return d + "/" + mo + "/" + y + "\n" + h + ":" + m + ":" + s;

                        }
                    }
                }
            },
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: "Fan value",


                }
            }
        }
    });

    function filterData(){
        const filterDate = [...fan_graph.data.labels];
        const filter_time = document.getElementById("filterTime").value;
        if(filter_time > 0) {
            let filter_index = filterDate.length;
            for (let i = 0; i < filterDate.length; ++i) {

                if ((Date.now() - filterDate[i]) <= (filter_time * 1000 * 60)) {
                    filter_index--;
                }
            }
            console.log(filter_index);

            const slicedDate = filterDate.slice(filter_index, filterDate.length);
            const filterDataPoints = [...fan_graph.data.datasets[0].data];
            const slicedDataPoints = filterDataPoints.slice(filter_index, filterDate.length)
            console.log(slicedDataPoints);
            fan_graph.config.data.labels = slicedDate;
            fan_graph.config.data.datasets[0].data = slicedDataPoints;
            fan_graph.update();
        }


    }

    const read_data = () => {
        fetch('/mutable-data').then(tmp => tmp.json()).then(data => {


            fan_graph.data.labels.push(data.timestamp);
            fan_graph.data.datasets[0].data.push(data.speed);

            // re-render the chart
            fan_graph.update();


        });
    }

    setInterval(read_data, 5000);

</script>
</body>
</html>
